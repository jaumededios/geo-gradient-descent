var canvas = false;

function generate_canvas (){
	if(canvas) return canvas
	var img = document.getElementById('height_data');
	canvas = document.createElement('canvas');
	canvas.width = img.width;
	canvas.height = img.height;
	canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);
}


window.onload = function(){
	generate_canvas()
	load_method('gdesc')
	document.getElementById('map_holder').appendChild(canvas)
	drawing_canvas = document.getElementById('drawing_canvas')
	drawing_canvas.width  = canvas.width
	drawing_canvas.height = canvas.height
}


function get_value(pixel){
	var [x,y] = pixel;
	pixel = [Math.round(x),Math.round(y)]
	var pixelData = canvas.getContext('2d')
						  .getImageData(pixel[0], pixel[1], 1, 1)
						  .data;
	var  h = translator.height[pixelData[0]]
	var gx = translator.gx[pixelData[1]]
	var gy = translator.gy[pixelData[2]]
	return [h,gx,gy]
}

function random_p0(){
	while(true){
		var x = Math.random()*canvas.width;
		var y =  Math.random()*canvas.width;
		var [h,gx,gy] = get_value([x,y])
		if(h>10) return [x,y]
	}
}

function randomize(){
	var [x,y] = random_p0();
	document.getElementById('x').value = Math.round(x);
	document.getElementById('y').value = Math.round(y);
}

function run(){
	var method = document.getElementById('function_text').value
	var init_params = document.getElementById('params_text').value
	var p0 = [Number(document.getElementById('x').value),
			  Number(document.getElementById('y').value)]
	var iters = Number(document.getElementById('nits').value)
	var result = iterate(method,init_params, p0, iters)
	draw_lines(result)
}

	function draw_lines(coords){
		console.log(coords.length)
		var ctx = drawing_canvas.getContext('2d');
		ctx.lineWidth = 5
		ctx.strokeStyle="#000000";
		var [x,y] = coords[0];
		ctx.beginPath();
		ctx.moveTo(x,y);
		for(var i=1; i<coords.length; i++){
			var [x,y] = coords[i];
			ctx.lineTo(x,y)
		}
		ctx.stroke()
	}

function iterate(_method, _init_params, _p0, _iters){
	_result = [_p0]

	eval(_init_params)
	eval('var _iter_step = '+_method)

	for(var _i = 0; _i< _iters;_i++){
		var [_h,_gx,_gy] = get_value(_p0)
		_p0 = _iter_step(_p0,[_gx,_gy],_h)
		_result.push(_p0)	
		if(_p0[0]<0 || _p0[0]>canvas.width ||
		   _p0[1]<0 || _p0[1]>canvas.height )
			break;
	}
	return _result
}

function load_method(name){
	document.getElementById('function_text').value = methods[name].function
	document.getElementById('params_text').value = methods[name].init_params
}

methods = {
	'gdesc': {
		'name': 'Gradient Descent',
		'init_params' :
`var STEP = 1;
// avoid names starting by '_'`,
		'function':
`function(pos,grad,height){
	var [x,y] = pos;
	var [gx,gy] = grad;
	return [x-STEP*gx,y-STEP*gy]
}`
	},
	'moment': {
		'name': 'Moment Metod',
		'init_params' :
`var FRICTION = .05;
var STEP = 1;
var vx = 0;
var vy = 0;
// avoid names starting by '_'`,
		'function':
`function(pos,grad,height){
	var [x,y] = pos;
	var [gx,gy] = grad;
	vx-=gx*STEP;vy-=gy*STEP
	vx*=(1-FRICTION)
	vy*=(1-FRICTION)
	return [x+vx,y+vy]
}`
	},
'custom':{
		'name': 'Custom',
		'init_params' :
`// declare global variables
// avoid names starting by '_'`,
		'function':
`function(pos,grad,height){
	var [x,y] = pos;
	var [gx,gy] = grad;
	// Write your Javascript code here
}`
	},
}


// Hardcoded, this is a baad baad idea
var translator = {"right": 5.000416715065181, "bottom": 39.999583575446934, "top": 45.00041690878027, "gy": [-555.9, -9.53, -8.06, -7.24, -6.36, -5.87, -5.52, -5.26, -5.04, -4.82, -4.56, -4.34, -4.16, -4.0, -3.85, -3.69, -3.56, -3.42, -3.27, -3.16, -3.08, -2.98, -2.88, -2.78, -2.7, -2.6, -2.52, -2.45, -2.38, -2.31, -2.24, -2.18, -2.11, -2.05, -2.0, -1.94, -1.89, -1.83, -1.77, -1.72, -1.67, -1.63, -1.59, -1.55, -1.51, -1.47, -1.43, -1.4, -1.36, -1.33, -1.3, -1.27, -1.24, -1.21, -1.18, -1.15, -1.13, -1.1, -1.07, -1.05, -1.02, -0.99, -0.97, -0.95, -0.92, -0.9, -0.88, -0.86, -0.84, -0.82, -0.79, -0.77, -0.75, -0.73, -0.72, -0.7, -0.68, -0.67, -0.65, -0.63, -0.62, -0.6, -0.59, -0.57, -0.56, -0.54, -0.52, -0.51, -0.49, -0.48, -0.46, -0.45, -0.44, -0.42, -0.41, -0.4, -0.38, -0.37, -0.35, -0.34, -0.32, -0.31, -0.29, -0.28, -0.27, -0.25, -0.24, -0.22, -0.21, -0.2, -0.19, -0.18, -0.17, -0.16, -0.15, -0.14, -0.13, -0.12, -0.11, -0.1, -0.09, -0.08, -0.07, -0.06, -0.05, -0.04, -0.04, -0.03, -0.02, -0.02, -0.01, -0.01, -0.01, -0.0, 0.0, 0.0, 0.01, 0.01, 0.02, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.42, 0.43, 0.45, 0.46, 0.48, 0.49, 0.51, 0.52, 0.54, 0.55, 0.57, 0.59, 0.6, 0.62, 0.64, 0.65, 0.67, 0.69, 0.71, 0.73, 0.74, 0.76, 0.79, 0.81, 0.84, 0.87, 0.89, 0.92, 0.95, 0.98, 1.01, 1.05, 1.09, 1.12, 1.16, 1.2, 1.24, 1.27, 1.31, 1.35, 1.39, 1.43, 1.48, 1.53, 1.58, 1.63, 1.67, 1.72, 1.77, 1.83, 1.89, 1.96, 2.05, 2.15, 2.27, 2.39, 2.53, 2.67, 2.8, 2.97, 3.21, 3.43, 3.75, 4.03, 4.34, 4.69, 5.1, 5.64, 6.08, 6.7, 7.5, 8.94, 10.23, 982.19], "gx": [-548.86, -6.95, -5.84, -5.12, -4.64, -4.25, -3.95, -3.76, -3.55, -3.38, -3.25, -3.12, -2.98, -2.86, -2.75, -2.64, -2.54, -2.45, -2.37, -2.28, -2.2, -2.13, -2.07, -2.01, -1.95, -1.89, -1.83, -1.78, -1.73, -1.68, -1.63, -1.58, -1.54, -1.49, -1.45, -1.41, -1.38, -1.34, -1.3, -1.26, -1.23, -1.2, -1.17, -1.14, -1.1, -1.07, -1.05, -1.02, -1.0, -0.97, -0.94, -0.91, -0.89, -0.86, -0.84, -0.81, -0.79, -0.76, -0.74, -0.72, -0.7, -0.68, -0.66, -0.64, -0.63, -0.61, -0.59, -0.57, -0.56, -0.54, -0.53, -0.51, -0.5, -0.49, -0.47, -0.46, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.28, -0.27, -0.26, -0.25, -0.24, -0.23, -0.22, -0.21, -0.21, -0.2, -0.19, -0.18, -0.17, -0.16, -0.16, -0.15, -0.14, -0.13, -0.13, -0.12, -0.11, -0.1, -0.1, -0.09, -0.08, -0.07, -0.07, -0.06, -0.05, -0.05, -0.04, -0.03, -0.02, -0.02, -0.01, -0.01, -0.0, 0.0, 0.0, 0.01, 0.01, 0.02, 0.02, 0.03, 0.04, 0.04, 0.05, 0.06, 0.06, 0.07, 0.08, 0.08, 0.09, 0.1, 0.1, 0.11, 0.12, 0.12, 0.13, 0.14, 0.15, 0.15, 0.16, 0.16, 0.17, 0.18, 0.18, 0.19, 0.2, 0.21, 0.21, 0.22, 0.23, 0.23, 0.24, 0.25, 0.26, 0.26, 0.27, 0.28, 0.29, 0.3, 0.3, 0.31, 0.32, 0.33, 0.34, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.48, 0.49, 0.5, 0.51, 0.53, 0.54, 0.55, 0.57, 0.58, 0.59, 0.61, 0.63, 0.64, 0.65, 0.67, 0.69, 0.7, 0.72, 0.75, 0.77, 0.79, 0.82, 0.85, 0.87, 0.9, 0.93, 0.95, 0.98, 1.0, 1.03, 1.06, 1.09, 1.13, 1.16, 1.19, 1.23, 1.27, 1.31, 1.35, 1.4, 1.46, 1.52, 1.58, 1.64, 1.7, 1.76, 1.83, 1.9, 1.97, 2.06, 2.14, 2.24, 2.36, 2.5, 2.66, 2.84, 3.07, 3.38, 3.71, 4.2, 4.85, 5.65, 6.56, 537.0], "height": [-1000.0, -8.53, -1.7, 0.05, 1.33, 5.95, 9.86, 15.61, 21.25, 26.93, 32.04, 36.68, 40.49, 44.3, 48.12, 51.83, 55.23, 58.31, 61.27, 65.16, 68.6, 72.39, 76.54, 80.48, 83.05, 86.32, 89.33, 91.85, 94.15, 97.16, 100.31, 103.55, 106.79, 109.36, 111.91, 114.04, 116.44, 118.62, 120.88, 122.84, 125.33, 127.45, 129.6, 131.64, 133.55, 135.6, 137.68, 139.79, 141.79, 143.86, 145.94, 147.71, 149.36, 150.99, 152.84, 154.77, 156.65, 158.93, 160.9, 163.01, 165.15, 167.53, 170.0, 172.2, 174.55, 176.58, 178.57, 180.76, 182.71, 184.62, 186.54, 188.48, 190.43, 192.33, 193.96, 196.03, 198.16, 200.31, 202.49, 204.63, 206.59, 208.49, 210.45, 212.53, 214.52, 216.32, 218.19, 220.16, 222.05, 223.91, 225.97, 228.05, 230.32, 232.56, 234.87, 237.17, 239.03, 241.43, 243.88, 246.33, 248.61, 251.25, 253.85, 256.98, 260.23, 263.05, 265.8, 268.95, 272.18, 275.31, 278.26, 280.89, 283.59, 286.54, 289.72, 292.68, 295.81, 299.01, 302.39, 306.1, 309.82, 313.98, 318.68, 323.25, 327.26, 331.03, 335.4, 338.96, 343.08, 347.93, 352.13, 356.81, 361.73, 366.68, 371.14, 375.19, 379.04, 383.76, 388.67, 394.14, 399.09, 404.94, 410.96, 416.39, 422.47, 429.45, 435.44, 441.37, 446.36, 453.17, 459.3, 464.66, 470.93, 477.79, 484.66, 490.09, 496.4, 502.55, 508.0, 513.69, 520.27, 526.84, 532.88, 539.59, 546.02, 551.26, 556.58, 563.2, 569.89, 576.61, 583.8, 590.66, 597.51, 604.53, 610.66, 616.74, 623.09, 628.64, 634.55, 641.23, 647.06, 652.73, 658.56, 665.06, 671.67, 678.91, 686.5, 693.64, 700.65, 707.42, 715.55, 722.97, 729.64, 737.54, 746.3, 754.88, 763.33, 772.04, 780.09, 788.18, 797.94, 808.99, 819.38, 830.54, 841.43, 851.38, 861.35, 872.62, 884.72, 895.29, 905.2, 917.24, 928.88, 940.3, 951.35, 964.87, 976.04, 987.7, 1003.28, 1018.96, 1033.32, 1049.74, 1061.64, 1074.39, 1091.3, 1107.71, 1123.22, 1139.83, 1158.22, 1176.3, 1192.88, 1209.54, 1227.62, 1246.78, 1270.69, 1294.6, 1327.73, 1368.25, 1400.07, 1438.61, 1487.56, 1537.64, 1577.68, 1625.1, 1672.01, 1716.77, 1768.35, 1832.81, 1890.36, 1951.37, 2017.15, 2078.29, 2152.68, 2238.91, 2344.86, 2523.72], "left": -0.0004166182681528685}
